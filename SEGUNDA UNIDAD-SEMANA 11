//CONTADOR
#include <iostream>
using namespace std;

class Contador{
private:
	int c;
	int nCont;//Numero del contador
	static int cCont;//Cantidad de contadores
public:
	explicit Contador(int cc=0)
    : c{cc}
    {nCont = ++cCont;}
	~Contador(){--cCont;}
	//Sobrecarga de operadores ++
	Contador& operator++(){
		c++;
		return *this;
	}
	Contador operator++(int){
	   Contador temp = *this;
	   ++*this;
	   return temp;
	}
	//Valor del contador y cantidad de contadores
	int valor(){return c;}
	int cantCont(){return cCont;}
};

int Contador::cCont;//Llamar al static
int main(){
    Contador c1{1};
    cout <<"Cantidad de contadores: " << c1.cantCont()<<endl;
    Contador c2{2};
    Contador c3{3};
    ++c1;
    ++c1;
    c2++;
    cout <<"Contador 1: "<< c1.valor()<<endl;
    cout <<"Contador 2: " << c2.valor()<<endl;
    cout <<"Contador 3: " << c3.valor()<<endl;
    cout <<"Cantidad de contadores: " << c2.cantCont()<<endl;
    return 0;
}
//RACIONAL
#include <iostream>

class Racional{
private:
    int x;
    int y;
public:
    explicit Racional(int xx=0, int yy=1)
    : x{xx}, y{yy}
    {redux();}
    ~Racional(){}
    //Constructor copia
    Racional(const Racional& p1){
        x = p1.x;
        y = p1.y;
    }
    //Operador asignacion 
    Racional operator=(const Racional& p1){return Racional(p1.x,p1.y);}
    //Extraccion de x y
    int num()const{return x;}
    int den()const{return y;}
    void asignar(const int xx=0,const int yy=1){x=xx;y=yy;}
    //Operadores +=,-=,*=,/=
    Racional& operator+=(const Racional& r1){
        x *=r1.y; 
        x += r1.x*y;
        y *= r1.y;
        return *this;
    }
    Racional& operator-=(const Racional& r1){
        x *=r1.y; 
        x -= r1.x*y;
        y -= r1.y;
        return *this;
    }
    Racional& operator*=(const Racional& r1){
        x *= r1.x;
        y *= r1.y;
        return *this;
    }
    Racional& operator/=(const Racional& r1){
        x /= r1.x;
        y /= r1.y;
        return *this;
    }

    //e) mejor aproximacion
    double bestAprox(){return (double)x/y;}

    //Reducir la fraccion
    void redux(){ 
      int t =  x>y ? x : y , div = 1; //Maximo divisor
      for(int i=1; i<=t;i++) if(x%i==0 && y%i==0) div=i; 
      x/=div; y/=div; //Divdirlos
    }
};
int num(const Racional& c) {return c.num();}
int den(const Racional& c) {return c.den();}
//Mostrar la fraccion
std::ostream& operator<<(std::ostream& os, Racional& r1){
    return os<<r1.num()<<"/"<<r1.den();
}
//Operadores +,-,*,/
inline Racional operator+( const Racional& c1, const Racional& c2) {
    return Racional(num(c1)*den(c2) + num(c2)*den(c1),den(c1) * den(c2));
}
inline Racional operator-( const Racional& c1, const Racional& c2) {
    return Racional(num(c1)*den(c2) - num(c2)*den(c1),den(c1) * den(c2));
}
inline Racional operator*( const Racional& c1, const Racional& c2) {
    return Racional(num(c1) * num(c2),den(c1) * den(c2));
}
inline Racional operator/( const Racional& c1, const Racional& c2) {
    return Racional(num(c1) / num(c2),den(c1) / den(c2));
}
//Operador >>
std::istream& operator>>(std::istream& is, Racional& c) {
    int x{0},y{1};
    std::cout << "Numerador: ";
    is >> x;
    std::cout << "Denomador: ";
    is >> y;
    c.asignar(x,y);
    return is;
}

int main()
{
    Racional r1= Racional(88,77);   
    Racional r2= Racional(2,3);   
    Racional r3=r2+r2;
    r2+=r1;
    std::cout<<r1<<" "<<r1.bestAprox()<<std::endl;
    std::cout<<r2<<" "<<r2.bestAprox()<<std::endl;
    std::cout<<r3<<" "<<r3.bestAprox()<<std::endl;
    Racional rr;
    std::cin>>rr;
    std::cout<<rr<<std::endl;
    return 0;
}
//TIEMPO #include<iostream>
using namespace std;

class tiempo
{
	float h,m,s;
	
public:	
	void leer();
	
	void imprime();
	tiempo operator +(tiempo D){
		tiempo aux;
		aux.h = h+D.h;
		aux.m = m+D.m;
		aux.s = s+D.s;
		
		return aux;
		
	}
	
	tiempo operator -(tiempo D){
		tiempo aux;
		aux.h = h-D.h;
		aux.m = m-D.m;
		aux.s = s-D.s;
		
		return aux;
		
	}
	
	tiempo operator /(tiempo D){
		tiempo aux;
		if (aux.h == D.h and aux.m == D.m and aux.s == D.s){
			cout<<"Valores iguales"<<endl;
		}	
		
	}
	tiempo operator >(tiempo D){
		tiempo aux;
		if (aux.h > D.h){
			cout<<"Tiempo 1 es mayor"<<endl;
		}else{
			cout<<"Tiempo 2 es mayor"<<endl;
		}	
		
	}
	tiempo operator <(tiempo D){
		tiempo aux;
		if (aux.h < D.h){
			cout<<"Tiempo 1 es menor"<<endl;
		}else{
			cout<<"Tiempo 2 es mayor"<<endl;
		}	
		
	}
};

void tiempo::leer(){
	cout<<"Hora:  ";cin>>h;
	cout<<"Minutos:  ";cin>>m;
	cout<<"Segundos:  ";cin>>s;
	
	if (m>60){
		m=m-60;
		h=h+1;
	}
	if (s>60){
		s=s-60;
		m=m+1;
	}
	
}

void tiempo::imprime(){
	if (h>=12){
	cout<<"Son las: "<<h<<"horas con "<<m<<"minutos y "<<s<<"segundos PM"<<endl;
	}
	else if (h<12){
	cout<<"Son las: "<<h<<"horas con "<<m<<"minutos y "<<s<<"segundos AM"<<endl;
	}
}

int main(){
	tiempo A, B, C;
	A.leer();
	B.leer();
	
	C= A+B;
	C.imprime();
	C= A-B;
	C.imprime();
	
}
//PILA
#include <iostream>
#include <stack>

template<typename T>
class Pila{
private:
	std::stack<T> pila;
	int s;
public:
	//a)Constructor y b)destructor
	Pila(){};
	explicit Pila(int ss=10)
    : s{ss} 
    { }
	~Pila(){};
	//Operacionnes de la pila
	void top(){std::cout<<pila.top()<<std::endl;}
	T pop(){T temp{pila.top()};pila.pop();return temp;}
	void push(T dato){
		if(!full()) pila.push(dato);	
		else std::cout<<"Pila llena"<<std::endl;
	}
	void clear(){while (!empty()) pila.pop();}

	//Verificadores de espacio
	int size(){return pila.size();}
	bool full(){return pila.size() >= s;}
	bool empty(){return pila.empty();}

	//MOSTRAR DATOS
	void print(){
    	std::stack<T> temp;
    	if (pila.empty()) std::cout <<"Esta vacia"<<std::endl;
	    while (!pila.empty()){
	        temp.push(pila.top());
	        pila.pop();
	    }  
	    while (!temp.empty()){
	        T t = temp.top();
	        std::cout << t << " ";
	        temp.pop();
	        pila.push(t); 
	    }
	    std::cout<<std::endl;
	}
};

int main(){
	Pila<int> p{2};
	p.push(5);
	p.push(5);
	p.push(5);
	p.print();
	p.pop();
	p.print();
	p.clear();
	p.print();
	//Prueba con otro tipo	
	Pila<float> p1{3};
	p1.push(2.5);
	p1.push(2.25);
	p1.print();
	return 0;
}
//CUADRATICO
#include<iostream>
using namespace std;

class Cuadratica
{
    private:
        double x;
        const double a = 0;
        const double b = 0;
        const double c = 0;
    public:
        Cuadratica(double _a, double _b, double _c):a(_a),b(_b),c(_c){
            double a = 0;
            double b = 0;
            double c = 0;
        }
        //CONSTRUCTOR COPIA
        Cuadratica(const Cuadratica& c1){
            cout<<"Constructor copia llamado"<<endl;
            x = c1.x;
            double a = c1.a;
            double b = c1.b;
            double c = c1.c;
        }
        //OPERADOR DE ASIGNACION
        Cuadratica& operator=(const Cuadratica& n)
        {
            cout<<"Operador de asignacion llamado"<<endl;
            return *this;
        }
        //OPERADOR LLAMADA FUNCION
        Cuadratica& operator()(double n){
            double resultado;
            x = n;
            resultado = a*(x*x) + b*x + c;
            cout<<"f("<<x<<")= "<<resultado<<endl;
            return *this;
        }
};

int main()
{
    Cuadratica valor(2, 3, 4);
    Cuadratica valor1(1, 1, 1);
    Cuadratica valor2(2, 2, 2);
    Cuadratica valor3 = valor;
    valor1 = valor2;
    valor(5);
}
//RANGO
#include <iostream>
#include <array>
#include <utility>

template<typename C, typename U = typename C::value_type>
U sumaRango(const C & x,int ini, int fin){//Solo retornar la suma
    U s{};
    for(auto i=x.begin()+ini;i<x.begin()+fin+1;i++) s+=*i;
    return s;
}
template<typename C, typename U = typename C::value_type> //Par para retornar valores
std::pair<U,U> sumaRango(const C & x,int ini, int fin,U iOp){
    U s{iOp};
    for(auto i=x.begin()+ini;i<x.begin()+fin;i++) s+=*i;
    return std::make_pair(iOp,s);
}

int main()
{
    std::array<int, 7> a = {1,2,3,4,5,6,7};
    //Indice empieza en 0
    std::cout<<"ARRAY 1\n";
    std::cout<<"- Suma total: "<<sumaRango(a,2,5)<<std::endl; //Del 3 al 6 sin val inicial
    std::cout<<"- Valor inicial: "<<sumaRango(a,1,6,7).first
    <<" | Suma total: "<<sumaRango(a,1,6,7).second<<std::endl; //Del 2 al 6 iniciando en 7
    
    //Pruba con otro tipo
    std::cout<<"ARRAY 2\n";
    std::array<float, 5> a1 = {1.1,2.2,4.73,6.2,7.2};
    std::cout<<"- Suma total: "<<sumaRango(a1,0,3)<<std::endl; 
    std::cout<<"- Valor inicial: "<<sumaRango(a1,1,4,2.1).first
    <<" | Suma total: "<<sumaRango(a1,1,4,2.1).second<<std::endl; 
    return 0;
}
//TOSTRING
#include <iostream>
#include <sstream>
using std::cout;
using std::endl;
using std::string;

template<typename type>
string to_string(const type&);

int main()
{
    int num_entero = 9478482;
    float num_decima1 = 1241.12;

    cout << to_string(num_entero) << endl;
    cout << to_string(num_decima1) << endl;

    char* caracteres = new char[10];
    
    for (int i = 0; i < 10; i++)
        caracteres[i] = 65+i;

    string carac = to_string(caracteres);

    cout << carac << endl;
    
    delete[] caracteres;
    return 0; 
}

template<typename type>
string to_string(const type& st)
{
    std:: stringstream ss{};
    ss << st;
    ss.ignore();

    return ss.str();
}
//
