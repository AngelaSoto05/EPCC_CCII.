//HISTOGRAMA
#include <iostream>
#include <vector>
#include <algorithm>
//Este no me lo considere profe.
using namespace std;
template <class P>
class histogram{
    private:
        vector<P> num;
    public:
        histogram(vector<P> h){
            num = h;
        };
        ~histogram(){};
        void add(P a) { num.push_back(a); };
        void printH(int n){
            vector<int> histo;
            sort(num.begin(),num.end());
            P a{((num.at(num.size()-1)-num.at(0))/n)+1};
            auto b = num.begin();
            P rang{num.at(0)};
            int pos{0};
            cout << endl;
            int c = 0;
            while(b!=num.end()){
                while(*b>=rang && *b<(rang+a)){
                    c++;
                    b++;
                }
                histo.push_back(c);
                rang += a;
                c = 0;
            }
            
            for (auto p = histo.begin(); p != histo.end();p++)
                cout << *p << " ";
            cout << '\n';
        }
};

int main(){
    vector<int> num = {10,2,9,7,5,6,1,8,8,4};
    histogram <int> h1 (num);
    h1.printH(5);
}
//SCRABBLE
#include <bits/stdc++.h>
using namespace std;
random_device rd;
mt19937 gen(rd());
uniform_int_distribution<> rand_ascii('A','Z');
uniform_int_distribution<> rand_int(1,5);

class Ficha{
private:
	char letra;
	int valor;
public:
	Ficha(){}
	Ficha(char _letra, int _valor){letra=_letra; valor=_valor;}
	void imprimir(Ficha){
		cout<<"Letra: "<<letra<<" <|> Valor: "<<valor<<endl;
	}
};

class Scrabble{
private:
	string nombre;
	vector<Ficha> fichas;
public:
	Scrabble(string _nombre){nombre=_nombre;}
	void gFichas(){ //Llenar las fichas del jugador aleartoriamente
		fichas.reserve(7);
		for(int i=7; i;i--)
			fichas.push_back(Ficha(char(rand_ascii(gen)),rand_int(gen)));
	}
	void mostrarFichas(){
		cout<<"El jugador:"<<nombre<<endl;
		for(Ficha i: fichas) i.imprimir(i); 
	}
};

int main()
{
	//Crear Jugadores	
	Scrabble j1 = Scrabble("Felipe");
	j1.gFichas();
	j1.mostrarFichas();

	Scrabble j2 = Scrabble("Wallace");
	j2.gFichas();
	j2.mostrarFichas();
	
	return 0;
}
//ROBOT
#include <string>
#include <iostream>
#include <stdlib.h>
#include <time.h>
using namespace std;

class Robot{
	private:
		double largo, ancho;
	public:

		void Variablesran(int);
		void Numerosran(int);
};

void Robot::Variablesran(int a){
	string palabra = "";
	int longitud;
	srand(time(NULL));
	
	for(int i=0; i<3; i++){
		palabra += 97+rand()%(122-97+a);
	}
	cout<<palabra;
}
void Robot::Numerosran(int a){
	srand(time(0));
	cout<<a+(rand()%999);
}

int main(){
	Robot r1;
	for (int i=0; i<11; i++){
	cout<<"El robot numero "<<i+1<<" se llamara: ";	
	r1.Variablesran(i);
	r1.Numerosran(i);
	cout<<endl;
	}
}
//SIMULADOR
#include <bits/stdc++.h>
using namespace std;

class Robot{
private:
	int x;
	int y;
	int dir;//Cordenadas de acuerdo a un eje de 360째
	string dirT;
public:
	Robot(int _x, int _y){x=_x;y=_y;dir=90;dirT="Norte";}//Direccion inicial

	void mover(string c){
		for(char i:c){	
			if(i=='A'){ //Movimientos de acuerdo a la direcci처n
				if(dir%360==0) x++;
				if(dir%360==90) y++;
				if(dir%360==180) x--;
				if(dir%360==270) y--;
			}
			//Cambios de direcci처n
			if(i=='D') dir+=270;
			if(i=='I') dir+=90;
			setDir();
		}
	}

	void setDir(){//Valor de la direcci처n 
		if(dir%360==0) dirT="Este";
		if(dir%360==90) dirT="Norte";
		if(dir%360==180) dirT="Oeste";
		if(dir%360==270) dirT="Sur";
	}
	
	void imprimir(){
		cout<<"Coordenadas: ("<<x<<","<<y<<") | Direccion: "<<dirT<<endl;
	}
};
int main()
{
	Robot r1 = Robot(7,3);
	r1.imprimir();
	r1.mover("DAAIAI");
	r1.imprimir();
	return 0;
}
//DOMINO
#include <bits/stdc++.h>
#include <algorithm>
using namespace std;

class Domino {
private:
	vector<pair<int, int>> Fichas;//Fichas ingresadas
	vector<vector<pair<int, int>>> Soluciones;//Soluciones generadas
public:
	Domino() {}
	void iFicha(pair<int, int> x) {Fichas.push_back(x);}
	void mFichas() {for (auto i : Fichas) cout << "[" << i.first << "|" << i.second << "]" << endl;}
	void genSol() {
		bool isSol = true;
		//Falta cambiar el orden de la ficha
		do {
			for (int i = 0; i < Fichas.size() - 1; i++) {
				if (Fichas.at(i).second != Fichas.at(i + 1).first) {isSol = false; break;}
			}
			if(Fichas.front().first != Fichas.back().second) {isSol = false;}
			if (isSol) {Soluciones.push_back(Fichas);} //Se cumplen las condiciones
			isSol = true;//Reseteo para sgte ficha
		} while (next_permutation(Fichas.begin(), Fichas.end())); //Permutar las fichas
	}
	void imprimirSol() { //Iterar el contenido de los vectores
		cout << "SOLUCIONES:" << endl;
		if (Soluciones.size() > 0) {
			for (auto j : Soluciones) {
				cout << "SOL:" << endl;
				for (auto i : j) cout << "[" << i.first << "|" << i.second << "]" << endl;
			}
		}else cout << "No hay Soluciones"<<endl;
	}
};

main() {
	Domino d = Domino();
	d.iFicha(make_pair(1, 2));
	d.iFicha(make_pair(2, 3));
	d.iFicha(make_pair(3, 1));
	cout<<"Fichas"<<endl;
	d.mFichas();
	d.genSol();
	d.imprimirSol();

	cout<<"Fichas"<<endl;
	Domino d1 = Domino();
	d1.iFicha(make_pair(1, 2));
	d1.iFicha(make_pair(4, 1));
	d1.iFicha(make_pair(2, 3));
	d1.mFichas();
	d1.genSol();
	d1.imprimirSol();
	return 0;
}
//DIAMANTE
#include <string>
#include <iostream>
#include<sstream>
using namespace std;

class Diamante{
	private:
		char letra;
		int altura;
	public:
		void dibujar(char, int);
		
};

void Diamante::dibujar(char c, int n){
	for(int i = 0;i<n/2+1;i++){
        for(int j = n/2-i;j >= 0;j--){
            if(j!=0)
               cout<<" ";
            if(i == 0&&j == 0){
                printf("%c\n",c);
                c++;
            }
            else if(j == 0){
                printf("%c",c);
                for(int k = 0;k < 2*i-1;k++){
                    cout<<" ";
                }
                printf("%c\n",c);
                c++;
            }
        }
    }
    c = c-2;
    int k = 2;
    for(int i = n/2;i >= 1;i--){
        for(int j = 1;j < k;j++){
            cout<<" ";
        }
        if(i == 1){
            printf("%c",c--);
            break;
        }
        printf("%c",c);
        for(int l = 2*i-3;l>=1;l--){
            cout<<" ";
        }
        printf("%c\n",c--);
        k++;
}
}

int main(){
	Diamante d1;
	d1.dibujar('A', 1);
	cout<<endl;
	d1.dibujar('A', 5);
	cout<<endl;
	d1.dibujar('A', 8);
	
		
}
//REINAS
#include <bits/stdc++.h>
using namespace std;

class Tablero{
private:
	string t{string(64,'_')}; //Tablero en un string
	pair<int,int> rB;//Cordenadas de fichas con pairs de enteros
	pair<int,int> rN;
public:
	Tablero(pair<int,int> _rB,pair<int,int> _rN){
		rB = _rB; rN = _rN;//Setear cordenadas y posicionar
		t[rB.first+rB.second*8] = 'B';
		t[rN.first+rN.second*8] = 'N';
	}
	//Movimientos: Primero se limpia el espacio ocupado, actualizar cord y luego se reubica
	void moverRB(pair<int,int> _rB){t[rB.first+rB.second*8] = '_';rB = _rB;t[rB.first+rB.second*8] = 'B';}
	void moverRN(pair<int,int> _rN){t[rN.first+rN.second*8] = '_';rN = _rN;t[rN.first+rN.second*8] = 'N';}

	void imprimirT(){//Imprimir el string en 8x8
		for(int j=0; j<8;j++){
			for(int i=0; i<8;i++) cout << t[i+j*8]<<" ";
			cout<<endl;
		}//Notificar si las reinas se pueden atacar
		(areAttackable()) ?cout<<"Se pueden atacar"<<endl:cout<<"No se pueden atacar"<<endl;
	}
	bool areAttackable(){//Comprobar igualdad filas o col o en diagonal 
		if(rB.first == rN.first || rB.second == rN.second || abs(rB.first-rN.first) == abs(rB.second-rN.second)) return true;
		else return false;
	}
};

int main(){
	Tablero t1 = Tablero(make_pair(1,1),make_pair(4,5));
	t1.imprimirT();
	t1.moverRB(make_pair(2,3)); t1.moverRN(make_pair(5,6));
	t1.imprimirT();
	return 0;
}
Footer
